#define files
range_fn = "Tityrinae_ecology2.nex"
tree_fn = "Tree.tre" 
out_fn = "output2/ecology"

#read files
dat_ecologies_01 = readDiscreteCharacterData(range_fn)
dat_ecologies_n = formatDiscreteCharacterData(dat_ecologies_01, "DEC")

#define areas, n_states, get state descriptions
n_ecologies = 2
state_desc = dat_ecologies_n.getStateDescriptions()
state_desc_str = "state,range\n"

mi=0

#write file with key to area state numericals
for (i in 1:state_desc.size()) { state_desc_str += (i-1) + "," + state_desc[i] + "\n"} 
write(state_desc_str, file=out_fn+".state_labels.txt")

#read the tree
tree <- readTrees(tree_fn)[1]

exp10_rate_bg ~ dnExponential(10.0)

moves[++mi] = mvScale(exp10_rate_bg, weight=10)

rate_bg := exp10_rate_bg

#define dispersal rates among ecologies: assume equal transitional probabilities
for (i in 1:n_ecologies) {
  for (j in 1:n_ecologies) {
    dr[i][j] <- 0.0
    if (i!=j) {
    dr[i][j] ~ dnExponential(20.0)
    moves[++mi] = mvScale(dr[i][j], weight=10)
    }
  }
}

#define extinction rates among ecologies, assume equal loss probabilities
log_sd <- 0.5
log_mean <- ln(1) - 0.5*log_sd^2

for (i in 1:n_ecologies) {
  for (j in 1:n_ecologies) {
    er[i][j] <- 0.0
  }
er[i][i] ~ dnExponential(20.0)
moves[++mi] = mvScale(er[i][i], weight=10)

}

Q_DEC := fnDECRateMatrix(dispersalRates=dr, extirpationRates=er, nullRange="Exclude")


clado_event_types = [ "s", "a" ]
clado_event_probs <- simplex( 1, 1 )
P_DEC := fnDECCladoProbs(eventProbs=clado_event_probs, eventTypes=clado_event_types, numCharacters=n_ecologies)

m_bg ~ dnPhyloCTMCClado(tree=tree, Q=Q_DEC, cladoProbs=P_DEC, branchRates=rate_bg, nSites=1, type="NaturalNumbers")
m_bg.clamp(dat_ecologies_n)

monitors[1] = mnScreen(rate_bg, printgen=100)
monitors[2] = mnModel(rate_bg, file=out_fn+".params.log", printgen=10)
monitors[3] = mnFile(tree, file=out_fn+".tre", printgen=10)
monitors[4] = mnJointConditionalAncestralState(tree=tree, ctmc=m_bg, filename=out_fn+".states.log", type="NaturalNumbers", printgen=10, withTips=true, withStartStates=true)
monitors[5] = mnFile(rate_bg, er[1][1],er[2][2],dr[2], dr[1], file=out_fn+".params2.txt", printgen=10)

mymodel=model(m_bg)

mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.run(25000)


#GET RESULTS
out_str = "output2/ecology"
out_state_fn = out_str + ".states.log"
out_tree_fn = out_str + ".tre"
out_mcc_fn = out_str + ".mcc.tre"
tree_trace=readTreeTrace(file=out_tree_fn, treetype="clock")
tree_trace.setBurnin(0.25)
n_burn = tree_trace.getBurnin()
mcc_tree = mccTree(tree_trace, file=out_mcc_fn)
state_trace = readAncestralStateTrace(file=out_state_fn)
 tree_trace = readAncestralStateTreeTrace(file=out_tree_fn, treetype="clock")
anc_tree = ancestralStateTree(tree=mcc_tree, ancestral_state_trace_vector=state_trace, tree_trace=tree_trace, include_start_states=true, file=out_str+".ase.tre",burnin=n_burn,site=0)
